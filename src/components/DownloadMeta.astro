---
interface Props {
  /** Final destination (the actual file or Google Sheets link) */
  href: string;
  updated: string;
  text?: string;

  /** Preferred: explicit counter key, e.g. "template/2026-raw-data-template" */
  downloadKey?: string;

  /** Optional fallbacks if you don't provide downloadKey */
  type?: string;   // e.g. "template" or "pdf"
  slug?: string;   // e.g. "2026-raw-data-template"
}

const {
  href,
  updated,
  text = "Download",
  downloadKey,
  type,
  slug,
} = Astro.props as Props;

if (!href || !updated) {
  throw new Error("DownloadMeta.astro requires href and updated");
}

/** ---------- Helpers ---------- */
const SITE_ORIGIN = "https://lifeloggerz.com"; // same origin as your Worker routes

function toAbsolute(url: string): string {
  try { return new URL(url, SITE_ORIGIN).toString(); }
  catch { return SITE_ORIGIN; }
}

/** Try to parse a /d/<type>/<slug> style href and return "type/slug" */
function parseCounterKeyFromDHref(url: string): string | null {
  try {
    const u = new URL(url, SITE_ORIGIN);
    const m = u.pathname.match(/^\/d\/([^/]+)\/(.+)$/);
    if (!m) return null;
    return `${m[1]}/${decodeURIComponent(m[2])}`;
  } catch { return null; }
}

/** Fallback inference from props or filename */
function deriveKeyFromPropsOrFilename(url: string): string {
  if (type && slug) return `${type}/${slug}`;

  // last segment (no query/hash)
  const u = new URL(url, SITE_ORIGIN);
  const last = (u.pathname.split("/").pop() || "").toLowerCase();

  // slug = filename without extension
  const inferredSlug = last.replace(/\.[^.]+$/, "") || "file";
  // type = extension or "file"
  const inferredType = (last.split(".").pop() || "file").toLowerCase();

  return `${inferredType}/${inferredSlug}`;
}

/** ---------- Build counter key ---------- */
const counterKey =
  downloadKey ||
  parseCounterKeyFromDHref(href) ||
  deriveKeyFromPropsOrFilename(href);

/** ---------- Build redirect URL through Worker ---------- */
const finalUrl = toAbsolute(href); // where user ultimately lands
const [keyType, keySlug] = counterKey.split("/", 2);
const dlHref = `/d/${encodeURIComponent(keyType)}/${encodeURIComponent(keySlug)}?to=${encodeURIComponent(finalUrl)}`;

/** ---------- Count endpoint for the UI ---------- */
const countUrl = `/count/downloads?key=${encodeURIComponent(counterKey)}`;

/** Only add the download attribute for same-origin direct files */
const isSameOrigin = finalUrl.startsWith(SITE_ORIGIN);
const looksLikeFile =
  /\.(pdf|docx?|xlsx?|pptx?|zip|png|jpe?g|gif|csv|txt|mp3|mp4|webm|wav)$/i.test(finalUrl);
const addDownloadAttr = isSameOrigin && looksLikeFile;
const countId = "dl-count-" + Math.random().toString(36).slice(2, 8);
---

<div class="download-meta">
  <span>Updated {updated}</span>
  <span class="meta-sep"> | </span>
  <span id={countId}>â€” Downloads</span>

  <!-- Fetch count -->
  <script
    src="/downloadcount.js"
    defer
    data-el={countId}
    data-key={counterKey}
    data-url={countUrl}
  ></script>
</div>

<div class="actions">
  <a class="btn" href={dlHref} {...(addDownloadAttr ? { download: "" } : {})}>
    {text}
  </a>
</div>

<style>
  .download-meta {
    font-size: 0.9rem;
    color: #6b7280;
    display: inline-flex;
    align-items: baseline;
    gap: 0.4rem;
  }
  .download-meta .meta-sep { opacity: 0.6; }

  .actions { margin-top: 0.6rem; display: flex; justify-content: center; }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.6rem 1.2rem;
    border-radius: 9999px;
    font-weight: 700;
    border: 1px solid var(--accent, #405cf5);
    text-decoration: none;
    background: var(--accent, #405cf5);
    color: white;
    box-shadow: 0 6px 20px var(--ring, rgba(64,92,245,0.25));
    transition: transform 0.04s ease, box-shadow 0.2s ease, background 0.2s ease;
    max-inline-size: 100%;
  }
  .btn:hover { transform: translateY(-1px); }
</style>
