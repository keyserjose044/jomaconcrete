---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

// Exclude drafts and sort safely
const posts = (await getCollection('blog', ({ data }) => data?.draft !== true))
  .map((p) => ({
    ...p,
    _pub: p.data?.pubDate instanceof Date
      ? p.data.pubDate
      : new Date(p.data?.pubDate ?? 0),
  }))
  .sort((a, b) => (b._pub?.valueOf?.() ?? 0) - (a._pub?.valueOf?.() ?? 0));
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`${SITE_TITLE} â€” Blog`} description={SITE_DESCRIPTION} />
    <style>
      :root {
        --list-max: clamp(60ch, 90vw, 1100px); /* desktop container */
        --read-max: 72ch;                      /* phone container */
        --border: #e6e9ef;
      }

      html, body { max-width: 100%; overflow-x: hidden; }
      main { width: 100%; margin: 0; }

      .wrap {
        width: 100%;
        max-width: var(--list-max);
        margin: 0 auto;
        padding: 0.5rem 1rem 2rem; /* makes it hug the navbar more */
        box-sizing: border-box;
      }

      /* header + search */
      .intro {
        max-width: var(--list-max);
        margin: 0 auto 1.25rem;
        text-align: center;
      }

      .toolbar {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        margin: 10px 0 0;
      }

      .toolbar input[type="search"] {
        width: 100%;
        max-width: 520px;
        padding: 12px 40px 12px 14px; /* right-side icon */
        border-radius: 12px;
        border: 1px solid var(--border);
        background: #fff
          url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="%235e6573" viewBox="0 0 24 24"><path d="M21.53 20.47l-3.67-3.67A8.5 8.5 0 1 0 10.5 19a8.46 8.46 0 0 0 5.3-1.82l3.67 3.67a.75.75 0 0 0 1.06-1.06ZM4 10.5a6.5 6.5 0 1 1 13 0a6.5 6.5 0 0 1-13 0Z"/></svg>')
          no-repeat right 12px center;
        background-size: 18px;
        color: #0e121b;
        font-size: .95rem;
        box-shadow: 0 1px 2px rgba(0,0,0,.03);
      }

      .toolbar input::placeholder {
        color: #888;
        font-style: italic;
      }

      /* grid of posts */
      ul {
        display: grid;
        grid-template-columns: repeat(2, minmax(0, 1fr));
        gap: 2rem;
        list-style: none;
        margin: 0;
        padding: 0;
      }

      li a { display: block; text-decoration: none; transition: 0.2s ease; }
      .title { margin: 0.5rem 0 0; color: rgb(var(--black)); line-height: 1.1; }
      .date  { margin: 0; color: rgb(var(--gray)); }

      /* First (featured) post takes full row */
      ul li:first-child { grid-column: 1 / -1; text-align: center; }

      /* Thumbnails */
      .thumb { display: block; width: 100%; height: auto; border-radius: 12px; }
      .thumb.portrait { width: auto; max-width: 100%; height: auto; margin-inline: auto; object-fit: contain; }
      ul li:first-child .thumb { width: 100%; height: auto; max-height: 600px; object-fit: contain; }

      ul a:hover img { box-shadow: var(--box-shadow); }
      ul li a:hover h4, ul li a:hover .date { color: rgb(var(--accent)); }

      .empty { display:none; text-align:center; color: rgb(var(--gray)); padding: 1rem 0; }

      /* .=================== MOBILE-ONLY CENTERING ===================. */
      @media (max-width: 768px) {
        .wrap {
          max-width: var(--read-max);
          margin-inline: auto !important;
          padding-inline: clamp(16px, 4vw, 24px) !important;
        }
        ul {
          grid-template-columns: 1fr !important;
          gap: clamp(12px, 3vw, 20px);
          justify-items: center;
        }
        h1, .title { font-size: clamp(1.1rem, 4.5vw, 1.35rem); }
        img, figure, video { display: block; max-width: 100%; height: auto; margin-inline: auto; }
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <section class="wrap">
        <div class="intro" role="region" aria-label="Blog header">
          <h1>Blog Posts</h1>
          <div class="toolbar">
            <input id="q" type="search" placeholder="Search" aria-label="Filter blog posts" />
          </div>
        </div>

        <div class="empty" id="empty">No posts match your search.</div>

        <ul id="grid">
          {posts.map((post) => {
            const isPortrait = Boolean(post.data?.heroImageStyle);
            const title = post.data.title ?? '';
            return (
              <li data-title={(title).toLowerCase()}>
                <a href={`/blog/${post.slug}/`}>
                  {post.data.heroImage && (
                    <img
                      class={`thumb ${isPortrait ? 'portrait' : ''}`}
                      src={post.data.heroImage}
                      alt=""
                      loading="lazy"
                      style={isPortrait ? post.data.heroImageStyle : undefined}
                    />
                  )}
                  <h4 class="title">{title}</h4>
                  <p class="date"><FormattedDate date={post._pub} /></p>
                </a>
              </li>
            );
          })}
        </ul>
      </section>
    </main>
    <Footer />

    <script>
      (function(){
        const $ = (s, r=document) => r.querySelector(s);
        const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
        const norm = s => (s||"").toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'');
        const debounce = (fn,ms)=>{let t;return(...a)=>{clearTimeout(t);t=setTimeout(()=>fn(...a),ms)}};

        const input = $('#q');
        const grid  = $('#grid');
        const empty = $('#empty');
        if (!input || !grid) return;

        const items = $$('li', grid);
        const hay = new Map(items.map(li => [li, norm(li.dataset.title || '')]));

        function filter(){
          const s = norm(input.value.trim());
          if (!s) {
            items.forEach(li => li.style.display = '');
            empty.style.display = 'none';
            return;
          }
          const words = s.split(/\s+/);
          let shown = 0;
          items.forEach(li => {
            const hit = words.every(w => hay.get(li).includes(w));
            li.style.display = hit ? '' : 'none';
            if (hit) shown++;
          });
          empty.style.display = shown ? 'none' : '';
        }

        input.addEventListener('input', debounce(filter, 80));
        // UX shortcuts
        window.addEventListener('keydown', e => {
          if (e.key === 'Escape') { input.value = ''; filter(); input.focus(); }
          else if (e.key === '/' && e.target === document.body) { e.preventDefault(); input.focus(); }
        });
        filter();
      })();
    </script>
  </body>
</html>
